AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for Rust binaries

Parameters:
  SslCertificateArn:
    Type: String
    Description: ARN of the ACM certificate for custom domain
  DomainName:
    Type: String
    Description: Domain name for the API Gateway custom domain
    Default: dylanlangston.com
  ToEmail:
    Type: String
    Description: Email address to forward emails to
  FromEmail:
    Type: String
    Description: Email address to use as the sender
  AwsS3BucketName:
    Type: String
    Description: Name of the S3 bucket
  AwsRegion:
    Type: String
    Description: AWS region
  AwsAccountId:
    Type: String
    Description: AWS account ID

Resources:
  SiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref AwsS3BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Statement:
          - Sid: AllowPublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${SiteBucket}/*"

  SiteDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt SiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: false
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          AcmCertificateArn: !Ref SslCertificateArn
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /404.html
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html


  EmailForwarderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EmailForwarderRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EmailForwarderPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AwsRegion}:${AwsAccountId}:log-group:/aws/lambda/EmailForwarder:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - ses:SendRawEmail
                Resource: 
                  - !Sub "arn:aws:s3:::${AwsS3BucketName}/*"
                  - !Sub "arn:aws:ses:${AwsRegion}:${AwsAccountId}:identity/${FromEmail}"
                  - !Sub "arn:aws:ses:${AwsRegion}:${AwsAccountId}:identity/${ToEmail}"

  EmailForwarderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rust.handler
      Runtime: provided.al2023
      CodeUri: rust-lambda/target/email-forward/bootstrap.zip
      Timeout: 30
      MemorySize: 256
      Architectures:
        - arm64
      Environment:
        Variables:
          ToEmail: !Ref ToEmail
          FromEmail: !Ref FromEmail
      Role: !GetAtt EmailForwarderRole.Arn
      FunctionName: EmailForwarder

  LambdaPermissionForSES:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt EmailForwarderFunction.Arn
      Principal: ses.amazonaws.com
      SourceArn: !Sub "arn:aws:ses:${AwsRegion}:${AwsAccountId}:receipt-rule-set/${EmailReceiptRuleSet}/receipt-rule/${EmailReceiptRule}"

  EmailReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties:
      RuleSetName: ForwardEmails

  EmailReceiptRule:
    Type: AWS::SES::ReceiptRule
    Properties:
      RuleSetName: !Ref EmailReceiptRuleSet
      Rule:
        Name: ForwardEmails
        Enabled: true
        ScanEnabled: false
        Recipients:
          - !Ref DomainName
        Actions:
          - S3Action:
              BucketName: !Ref AwsS3BucketName
          - LambdaAction:
              FunctionArn: !GetAtt EmailForwarderFunction.Arn

  ContactRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ContactPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AwsRegion}:${AwsAccountId}:log-group:/aws/lambda/ContactFunction:*"
              - Effect: Allow
                Action: ses:SendEmail
                Resource: 
                  - !Sub "arn:aws:ses:${AwsRegion}:${AwsAccountId}:identity/${ToEmail}"
                  - !Sub "arn:aws:ses:${AwsRegion}:${AwsAccountId}:identity/${FromEmail}"

  ContactFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: rust-lambda/target/contact/bootstrap.zip
      Handler: rust.handler
      Runtime: provided.al2023
      Role: !GetAtt ContactRole.Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          ToEmail: !Ref ToEmail
          FromEmail: !Ref FromEmail
      Events:
        ContactPOST:
          Type: Api
          Properties:
            Path: /contact
            Method: POST
        ContactOptions:
          Type: Api
          Properties:
            Path: /contact
            Method: OPTIONS

  ApiGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "api.${DomainName}"
      CertificateArn: !Ref SslCertificateArn

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayCustomDomain
      RestApiId: !Ref ServerlessRestApi
      Stage: Prod

Outputs:
  EmailForwarderFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt EmailForwarderFunction.Arn

  ContactFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt ContactFunction.Arn

  ApiUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://api.${DomainName}/contact"
