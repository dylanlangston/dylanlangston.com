AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for Rust binaries

Parameters:
  SslCertificateArn:
    Type: String
    Description: ARN of the ACM certificate for custom domain
  DomainName:
    Type: String
    Description: Domain name for the API Gateway custom domain
    Default: dylanlangston.com

  ToEmail:
    Type: String
    Description: Email address to forward emails to
    Default: ""
    MinLength: 1
  FromEmail:
    Type: String
    Description: Email address to use as the sender
    Default: ""
    MinLength: 1

Resources:
  EmailForwarderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EmailForwarderRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: '*'

  EmailForwarderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rust.handler
      Runtime: provided.al2023
      CodeUri: contact-lambda/target/contact-lambda/bootstrap.zip
      Timeout: 30
      MemorySize: 256
      Architectures:
        - arm64
      Environment:
        Variables:
          TO_EMAIL: !Ref ToEmail
          FROM_EMAIL: !Ref FromEmail
      Role: !GetAtt EmailForwarderRole.Arn
      FunctionName: EmailForwarder

  ContactFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSESAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ses:SendEmail
                Resource: '*'

  ContactFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: email-forward-lambda/target/email-forward-lambda/bootstrap.zip
      Handler: rust.handler
      Runtime: provided.al2023
      Role: !GetAtt ContactFunctionRole.Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          TO_EMAIL: !Ref ToEmail
          FROM_EMAIL: !Ref FromEmail
      Events:
        ContactPOST:
          Type: Api
          Properties:
            Path: /contact
            Method: POST
        ContactOptions:
          Type: Api
          Properties:
            Path: /contact
            Method: OPTIONS

  ApiGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "api.${DomainName}"
      CertificateArn: !Ref SslCertificateArn

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayCustomDomain
      RestApiId: !Ref ServerlessRestApi
      Stage: Prod

Outputs:
  EmailForwarderFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt EmailForwarderFunction.Arn

  ContactFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt ContactFunction.Arn

  ApiUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://api.${DomainName}/contact"
