name: Build and Deploy Pages

on:
  push:
    branches: ["main"]
    
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      datetime: ${{ steps.set_datetime.outputs.datetime }}
    steps:
      - name: Set current datetime output variable
        id: set_datetime
        run: echo "datetime=$(date +"1.%y%m%d.%H%M%S")" >> "$GITHUB_OUTPUT"
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3
      - name: Restore cached docker image
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ./cached-docker-image
          key: docker-${{ runner.os }}-${{ hashFiles('Dockerfile') }}-${{ hashFiles('**/BuildAndDeploy.yml') }}
      - name: Make using docker
        run: |
          [ -f ./cached-docker-image ] && docker load -i ./cached-docker-image
          make release-docker VERSION=${{ steps.set_datetime.outputs.datetime }} OPTIMIZE='ReleaseFast'
          docker save -o ./cached-docker-image dylanlangston.com:latest
      - name: Upload artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: release-artifact
          path: '${{ github.workspace }}/site/build'
      - name: Upload github pages artifact
        id: upload-compressed
        uses: actions/upload-pages-artifact@v2
        with:
          path: '${{ github.workspace }}/site/build'
      - name: Save docker images
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: |
            ./cached-docker-image
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}


  deploy-github-pages:
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  release:
    runs-on: ubuntu-latest
    needs: [build, deploy-github-pages]
    permissions:
      contents: write
    environment:
      name: production
    steps:
    - name: Download artifact
      id: download
      uses: actions/download-artifact@v4
      with:
        name: release-artifact
    - name: Create ZIP
      run: |
        cd ${{ steps.download.outputs.download-path }}/../
        zip -r ./dylanlangstoncom-v${{ needs.build.outputs.datetime}}.zip ./dylanlangston.com/
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ steps.download.outputs.download-path }}/../dylanlangstoncom-v${{ needs.build.outputs.datetime}}.zip"
        artifactContentType: application/zip
        body: |
          **DylanLangston.com - _Prerelease v${{ needs.build.outputs.datetime }}_**
          ${{ github.event.head_commit.message }}
        prerelease: true
        draft: false
        commit: ${{ github.head_ref }}
        tag: v${{ needs.build.outputs.datetime }}
        token: ${{ secrets.GITHUB_TOKEN }}
