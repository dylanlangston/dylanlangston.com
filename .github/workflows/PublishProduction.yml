name: Release Site To Production

on:
  # workflow_run:
  #   workflows: ["Build and Deploy Pages"]
  #   types: [completed]

  workflow_dispatch:

concurrency:
  group: "publish"
  cancel-in-progress: true

jobs:
  publish-release:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      packages: read
      contents: write
    environment:
      name: production
    steps:
      - name: Build Summary
        uses: dylanlangston/dylanlangston.com/.github/actions/PopulateBuildSummary@main
        id: summary
        with:
          version: ${{ steps.get_version.outputs.version }}
          mode: 'publish'
          runId: ${{ github.run_id }}
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Get Version
        uses: ./.github/actions/VersionString
        id: get_version
        with:
          time: ${{ github.event.workflow_run.head_commit.timestamp }}
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "dylanlangston.com-v${{ steps.get_version.outputs.version }}"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/dylanlangston.com-v${{ steps.get_version.outputs.version }}.zip`, Buffer.from(download.data));
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dylanlangston.com-v${{ steps.get_version.outputs.version }}.zip"
          artifactContentType: application/zip
          body: |
            **DylanLangston.com - _Prerelease v${{ steps.get_version.outputs.version }}_**
            ${{ github.event.workflow_run.head_commit.message }}
          prerelease: true
          draft: false
          commit: ${{ github.head_ref }}
          tag: v${{ steps.get_version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
