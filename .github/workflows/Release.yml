name: 4Ô∏è‚É£ - Release Site to Production

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      commit-message:
        required: true
        type: string
      runId:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Key'
        required: true

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: "Release üì¶"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    permissions:
      packages: read
      contents: write
    environment:
      name: production
    steps:
      - name: Release Summary
        uses: dylanlangston/dylanlangston.com/.github/actions/PopulateBuildSummary@main
        id: summary
        with:
          version: ${{ inputs.version }}
          mode: 'release'
          runId: ${{ github.run_id }}
      - name: 'Create Release'
        uses: actions/github-script@v7
        env:
          INPUT_COMMIT-MESSAGE: ${{ inputs.commit-message }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const repoName = "${{ github.repository }}".split('/')[1];
            const releaseResponse = await github.rest.repos.createRelease({
                body: "**DylanLangston.com - _Prerelease v${{ inputs.version }}_**<br/>" + core.getInput('commit-message', { required: true }),
                name: "v${{ inputs.version }}",
                make_latest: "true",
                owner: "${{ github.repository_owner }}",
                prerelease: true,
                draft: false,
                repo: repoName,
                target_commitish: "${{ github.sha }}",
                tag_name: "v${{ inputs.version }}"
            });
            const releaseData = releaseResponse.data;
            const releaseId = releaseData.id;
            const uploadUrl = releaseData.upload_url;

            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: '${{ github.run_id }}',
            });

            const artifactsFolder = path.join(__dirname, 'artifacts');
            if (!fs.existsSync(artifactsFolder)) {
              fs.mkdirSync(artifactsFolder);
            }

            for (let prefix of ["dylanlangston.com-v", "dylanlangston.com-contact-v"]) {
              const matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
                return artifact.name == prefix + "${{ inputs.version }}"
              })[0];
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
              });

              const filePath = path.join(artifactsFolder, `${prefix}${inputs.version}.zip`);
              fs.writeFileSync(filePath, download.data);

              const uploadResponse = await github.rest.repos.uploadReleaseAsset({
                  url: uploadUrl,
                  headers: {
                      "content-length": download.headers['content-length'],
                      "content-type": download.headers['content-type']
                  },
                  data: download.data,
                  name: prefix + "${{ inputs.version }}.zip",
                  owner: "${{ github.repository_owner }}",
                  release_id: releaseId,
                  repo: repoName
              });
            }
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Deploy to AWS
        uses: dylanlangston/dylanlangston.com/.github/actions/SAMDeploy@main
        id: deploy
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws-acm-arn: "${{ secrets.AWS_ACM_ARN }}"
          aws-region: 'us-east-1'
            
